<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blogs on barabara diary</title><link>https://diohabara.github.io/blog/</link><description>Recent content in Blogs on barabara diary</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 07 Jul 2023 00:00:47 -0500</lastBuildDate><atom:link href="https://diohabara.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>picoCTF 2021: Nice netcat...</title><link>https://diohabara.github.io/blog/nice-netcat/</link><pubDate>Fri, 07 Jul 2023 00:00:47 -0500</pubDate><guid>https://diohabara.github.io/blog/nice-netcat/</guid><description>Solution Acknowledgement Solution #When I execute the given command, I get this output:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 $ nc mercury.picoctf.net 21135 112 105 99 111 67 84 70 123 103 48 48 100 95 107 49 116 116 121 33 95 110 49 99 51 95 107 49 116 116 121 33 95 97 102 100 53 102 100 97 52 125 10 This seems to be a list of ASCII codes.</description></item><item><title>picoCTF 2021: Wave a Flag</title><link>https://diohabara.github.io/blog/wave-a-flag/</link><pubDate>Wed, 28 Jun 2023 04:59:58 -0500</pubDate><guid>https://diohabara.github.io/blog/wave-a-flag/</guid><description>Solution Acknowledgement Solution #You&amp;rsquo;re given a file called warm. Run file on it and you&amp;rsquo;ll find that it&amp;rsquo;s an ELF file.
1 2 $ file resources/warm resources/warm: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, for GNU/Linux 3.2.0, BuildID[sha1]=01b148cdedfc38125cac0d87e0537466d47927b1, with debug_info, not stripped Run ./warm and you&amp;rsquo;ll get the following output.
1 2 $ ./resources/warm Hello user! Pass me a -h to learn what I can do!</description></item><item><title>picoCTF 2021: Python Wrangling</title><link>https://diohabara.github.io/blog/python-wrangling/</link><pubDate>Wed, 28 Jun 2023 04:46:22 -0500</pubDate><guid>https://diohabara.github.io/blog/python-wrangling/</guid><description>Solution Acknowledgement Solution #You will be given the following files.
ende.py flag.txt.en pw.txt The ende.py is a simple encryption/decryption script.
1 2 $ python scripts/ende.py Usage: scripts/ende.py (-e/-d) [file] The flag.txt.en is an encrypted flag. I used the string in pw.txt as a password.
1 2 3 $ python scripts/ende.py -d scripts/flag.txt.en Please enter the password:ac9bd0ffac9bd0ffac9bd0ffac9bd0ff picoCTF{4p0110_1n_7h3_h0us3_ac9bd0ff} Acknowledgement #Thank you, CMU security and privacy experts, for creating this challenge.</description></item><item><title>picoCTF 2021: Mod 26</title><link>https://diohabara.github.io/blog/mod-26/</link><pubDate>Wed, 28 Jun 2023 00:21:24 -0500</pubDate><guid>https://diohabara.github.io/blog/mod-26/</guid><description>Solution Acknowledgement Solution #You will be given this string, cvpbPGS{arkg_gvzr_V'yy_gel_2_ebhaqf_bs_ebg13_hyLicInt}. Apply ROT13 to it and you&amp;rsquo;ll get the flag.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 def rot13(s): ret = [] for c in s: if ord(&amp;#34;a&amp;#34;) &amp;lt;= ord(c) &amp;lt;= ord(&amp;#34;z&amp;#34;): ret.append(chr((ord(c) - ord(&amp;#34;a&amp;#34;) + 13) % 26 + ord(&amp;#34;a&amp;#34;))) elif ord(&amp;#34;A&amp;#34;) &amp;lt;= ord(c) &amp;lt;= ord(&amp;#34;Z&amp;#34;): ret.</description></item><item><title>picoCTF 2021: Obedient Cat</title><link>https://diohabara.github.io/blog/obedient-cat/</link><pubDate>Wed, 28 Jun 2023 00:09:10 -0500</pubDate><guid>https://diohabara.github.io/blog/obedient-cat/</guid><description>Solution Acknowledgement Solution #Download the attached file and run cat on it. You&amp;rsquo;ll find the flag.
Acknowledgement #Thank you, CMU security and privacy experts, for creating this challenge.</description></item></channel></rss>